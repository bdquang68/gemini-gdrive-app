import streamlit as st
import os, glob, gdown
import google.generativeai as genai
from langchain.text_splitter import RecursiveCharacterTextSplitter
from PyPDF2 import PdfReader
import docx
import openpyxl
from pptx import Presentation

# ================================
# 1) C·∫•u h√¨nh Gemini API
# ================================
# L∆∞u √Ω: GOOGLE_API_KEY ph·∫£i l√† key AI Studio (b·∫Øt ƒë·∫ßu b·∫±ng "AIza...")
genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])

# ================================
# 2) H√†m ƒë·ªçc c√°c lo·∫°i file
# ================================
def read_pdf(path: str) -> str:
    try:
        text = ""
        reader = PdfReader(path)
        for page in reader.pages:
            text += page.extract_text() or ""
        return text
    except Exception as e:
        return f"\n[PDF ƒë·ªçc l·ªói {os.path.basename(path)}: {e}]\n"

def read_docx(path: str) -> str:
    try:
        text = ""
        doc = docx.Document(path)
        for para in doc.paragraphs:
            text += (para.text or "") + "\n"
        return text
    except Exception as e:
        return f"\n[DOCX ƒë·ªçc l·ªói {os.path.basename(path)}: {e}]\n"

def read_excel(path: str) -> str:
    try:
        text = ""
        wb = openpyxl.load_workbook(path, data_only=True)
        for sheet in wb.sheetnames:
            ws = wb[sheet]
            for row in ws.iter_rows(values_only=True):
                cells = [str(c) for c in row if c is not None]
                if cells:
                    text += " | ".join(cells) + "\n"
        return text
    except Exception as e:
        return f"\n[XLSX ƒë·ªçc l·ªói {os.path.basename(path)}: {e}]\n"

def read_pptx(path: str) -> str:
    try:
        text = ""
        prs = Presentation(path)
        for slide in prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, "text"):
                    text += (shape.text or "") + "\n"
        return text
    except Exception as e:
        return f"\n[PPTX ƒë·ªçc l·ªói {os.path.basename(path)}: {e}]\n"

def read_txt(path: str) -> str:
    try:
        return open(path, "r", encoding="utf-8", errors="ignore").read()
    except Exception as e:
        return f"\n[TXT ƒë·ªçc l·ªói {os.path.basename(path)}: {e}]\n"

def read_file(path: str) -> str:
    p = path.lower()
    if p.endswith(".pdf"):
        return read_pdf(path)
    if p.endswith(".docx"):
        return read_docx(path)
    if p.endswith(".xlsx"):
        return read_excel(path)
    if p.endswith(".pptx"):
        return read_pptx(path)
    if p.endswith(".txt") or p.endswith(".csv"):
        return read_txt(path)
    # B·ªè qua file kh√¥ng h·ªó tr·ª£
    return ""

# ================================
# 3) T·∫£i d·ªØ li·ªáu t·ª´ Google Drive (theo Folder ID)
# ================================
def load_data_from_gdrive(folder_id: str) -> str:
    """
    - Y√™u c·∫ßu th∆∞ m·ª•c ƒë√£ b·∫≠t 'Anyone with the link - Viewer'
      ho·∫∑c service account c√≥ quy·ªÅn ƒë·ªçc.
    - D√πng gdown.download_folder(id=...) thay v√¨ URL.
    """
    os.makedirs("data", exist_ok=True)

    try:
        # Xo√° n·ªôi dung c≈© ƒë·ªÉ tr√°nh tr·ªôn file
        for f in glob.glob("data/*"):
            if os.path.isdir(f):
                # x√≥a th∆∞ m·ª•c con c≈©
                import shutil
                shutil.rmtree(f, ignore_errors=True)
            else:
                os.remove(f)

        gdown.download_folder(
            id=folder_id,
            output="data",
            quiet=True,
            use_cookies=False,  # c·∫ßn thi·∫øt tr√™n Streamlit Cloud
        )
    except Exception as e:
        st.error(
            "Kh√¥ng t·∫£i ƒë∆∞·ª£c th∆∞ m·ª•c t·ª´ Google Drive.\n"
            f"L·ªói: {e}\n\n"
            "C√°ch kh·∫Øc ph·ª•c:\n"
            "‚Ä¢ Ki·ªÉm tra ƒë√∫ng Folder ID (ph·∫ßn sau 'folders/').\n"
            "‚Ä¢ B·∫≠t 'Anyone with the link ‚Üí Viewer' cho th∆∞ m·ª•c, "
            "ho·∫∑c chia s·∫ª cho service account n·∫øu b·∫°n d√πng Google API.\n"
        )
        return ""

    # ƒê·ªçc t·∫•t c·∫£ file trong th∆∞ m·ª•c v√† c√°c th∆∞ m·ª•c con
    texts = []
    for path in glob.glob("data/**/*", recursive=True):
        if os.path.isfile(path):
            texts.append(read_file(path))

    return "\n".join(texts)

# ================================
# 4) Chunk d·ªØ li·ªáu
# ================================
def chunk_text(text: str, chunk_size=1000, overlap=200):
    splitter = RecursiveCharacterTextSplitter(
        chunk_size=chunk_size, chunk_overlap=overlap
    )
    return splitter.split_text(text)

# ================================
# 5) Giao di·ªán Streamlit
# ================================
st.title("üìÇ AI Assistant ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ Google Drive")

folder_id = st.text_input("Nh·∫≠p Google Drive Folder ID:", "")

data = ""
if folder_id.strip():
    with st.spinner("ƒêang t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu..."):
        data = load_data_from_gdrive(folder_id.strip())

    if data:
        chunks = chunk_text(data)
        st.success(f"ƒê√£ load {len(chunks)} chunks d·ªØ li·ªáu.")
    else:
        st.stop()

# ================================
# 6) H·ªèi AI (Gemini)
# ================================
query = st.text_input("Nh·∫≠p c√¢u h·ªèi:")
if query and data:
    try:
        # c·∫Øt b·ªõt ƒë·∫ßu v√†o ƒë·ªÉ an to√†n context (c√≥ th·ªÉ thay b·∫±ng RAG sau)
        context = data[:20000]
        model = genai.GenerativeModel("gemini-1.5-pro")
        prompt = f"D·ªØ li·ªáu:\n{context}\n\nC√¢u h·ªèi: {query}\n\nTr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ª±a v√†o d·ªØ li·ªáu."
        with st.spinner("ƒêang g·ªçi m√¥ h√¨nh Gemini..."):
            response = model.generate_content(prompt)
        st.subheader("üîé K·∫øt qu·∫£ AI ph√¢n t√≠ch:")
        st.write(response.text)
    except Exception as e:
        st.error(f"L·ªói khi g·ªçi Gemini: {e}")

