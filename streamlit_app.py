import streamlit as st
import os, glob, gdown
import google.generativeai as genai
from langchain_text_splitters import RecursiveCharacterTextSplitter
from PyPDF2 import PdfReader
import docx, openpyxl
from pptx import Presentation

# 1) Gemini API
API_KEY = st.secrets.get("GOOGLE_API_KEY", "")
if not API_KEY:
    st.error("Thi·∫øu GOOGLE_API_KEY trong Secrets (App settings ‚Üí Secrets).")
    st.stop()
genai.configure(api_key=API_KEY)

# 2) ƒê·ªçc file
def read_pdf(p):
    try:
        text=""; r=PdfReader(p)
        for page in r.pages: text += page.extract_text() or ""
        return text
    except Exception as e: return f"\n[PDF l·ªói {os.path.basename(p)}: {e}]\n"

def read_docx(p):
    try:
        d=docx.Document(p)
        return "\n".join((para.text or "") for para in d.paragraphs)
    except Exception as e: return f"\n[DOCX l·ªói {os.path.basename(p)}: {e}]\n"

def read_excel(p):
    try:
        wb=openpyxl.load_workbook(p, data_only=True); out=[]
        for s in wb.sheetnames:
            for row in wb[s].iter_rows(values_only=True):
                cells=[str(c) for c in row if c is not None]
                if cells: out.append(" | ".join(cells))
        return "\n".join(out)
    except Exception as e: return f"\n[XLSX l·ªói {os.path.basename(p)}: {e}]\n"

def read_pptx(p):
    try:
        prs=Presentation(p); out=[]
        for slide in prs.slides:
            for sh in slide.shapes:
                if hasattr(sh,"text"): out.append(sh.text or "")
        return "\n".join(out)
    except Exception as e: return f"\n[PPTX l·ªói {os.path.basename(p)}: {e}]\n"

def read_txt(p):
    try: return open(p,"r",encoding="utf-8",errors="ignore").read()
    except Exception as e: return f"\n[TXT l·ªói {os.path.basename(p)}: {e}]\n"

def read_file(p):
    pl=p.lower()
    if pl.endswith(".pdf"): return read_pdf(p)
    if pl.endswith(".docx"): return read_docx(p)
    if pl.endswith(".xlsx"): return read_excel(p)
    if pl.endswith(".pptx"): return read_pptx(p)
    if pl.endswith(".txt") or pl.endswith(".csv"): return read_txt(p)
    return ""

# 3) T·∫£i to√†n b·ªô th∆∞ m·ª•c b·∫±ng gdown (c√≥ b·∫Øt l·ªói)
def load_data_from_gdrive(folder_id: str) -> str:
    os.makedirs("data", exist_ok=True)
    # d·ªçn c≈©
    for p in glob.glob("data/*"):
        if os.path.isdir(p):
            import shutil; shutil.rmtree(p, ignore_errors=True)
        else:
            try: os.remove(p)
            except: pass

    try:
        gdown.download_folder(
            id=folder_id,
            output="data",
            quiet=True,
            use_cookies=False,   # c·∫ßn cho Streamlit Cloud
            remaining_ok=True    # kh√¥ng fail n·∫øu v√†i file kh√¥ng t·∫£i ƒë∆∞·ª£c
        )
    except Exception as e:
        st.exception(e)  # hi·ªán full stacktrace ƒë·ªÉ s·ª≠a nhanh
        st.error(
            "Kh√¥ng t·∫£i ƒë∆∞·ª£c th∆∞ m·ª•c t·ª´ Google Drive.\n\n"
            "Ki·ªÉm tra:\n"
            "‚Ä¢ Folder ID ƒë√∫ng ch∆∞a (chu·ªói sau 'folders/')?\n"
            "‚Ä¢ Th∆∞ m·ª•c ƒë√£ m·ªü 'Anyone with the link ‚Üí Viewer' ch∆∞a?\n"
        )
        return ""

    texts=[]
    for p in glob.glob("data/**/*", recursive=True):
        if os.path.isfile(p):
            texts.append(read_file(p))
    return "\n".join(texts)

# 4) Chunk
def chunk_text(text, chunk_size=1000, overlap=200):
    return RecursiveCharacterTextSplitter(
        chunk_size=chunk_size, chunk_overlap=overlap
    ).split_text(text)

# 5) UI
st.title("üìÇ AI Assistant ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ Google Drive")
folder_id = st.text_input("Nh·∫≠p Google Drive Folder ID:", "")
data = ""

if folder_id.strip():
    with st.spinner("ƒêang t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu..."):
        data = load_data_from_gdrive(folder_id.strip())
    if not data:
        st.stop()
    chunks = chunk_text(data)
    st.success(f"‚úÖ ƒê√£ load {len(chunks)} chunks d·ªØ li·ªáu.")

query = st.text_input("Nh·∫≠p c√¢u h·ªèi:")
if query and data:
    try:
        model = genai.GenerativeModel("gemini-1.5-pro")
        prompt = f"D·ªØ li·ªáu:\n{data[:20000]}\n\nC√¢u h·ªèi: {query}\n\nTr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ª±a v√†o d·ªØ li·ªáu."
        with st.spinner("ƒêang ph√¢n t√≠ch b·∫±ng Gemini..."):
            resp = model.generate_content(prompt)
        st.subheader("üîé K·∫øt qu·∫£ AI ph√¢n t√≠ch")
        st.write(resp.text)
    except Exception as e:
        st.exception(e)
        st.error("L·ªói khi g·ªçi Gemini ‚Äì ki·ªÉm tra l·∫°i API key ho·∫∑c n·ªôi dung c√¢u h·ªèi.")
